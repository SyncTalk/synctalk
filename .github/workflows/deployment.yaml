name: deployment

on:
  push:
    branches:
      - staging
  workflow_dispatch:

jobs:
  deploy-frontend:
    runs-on: ubuntu-22.04
    steps:
      - name: checkout latest commit
        uses: actions/checkout@v4
        with:
          sparse-checkout: frontend
        timeout-minutes: 1

      - run: ls

      - name: change to frontend directory
        run: cd frontend
        timeout-minutes: 1

      - run: ls

      - name: setup node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: npm
        timeout-minutes: 1

      - id: setup-node-modules-cache
        name: setup node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
        timeout-minutes: 1

      - if: ${{ steps.setup-node-modules-cache.outputs.cache-hit != 'true' }}
        name: clean install dependencies
        run: npm ci
        timeout-minutes: 5

      - name: build react app
        run: npm run build
        timeout-minutes: 5

      - name: set up docker buildx
        uses: docker/setup-buildx-action@v2
        timeout-minutes: 1

      - name: setup digitalocean command line interface
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        timeout-minutes: 1

      - name: login to digitalocean registry
        run: doctl registry login --expiry-seconds 300
        timeout-minutes: 1

      - name: build and push new web server image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: registry.digitalocean.com/synctalk/web-server
        timeout-minutes: 5

      - name: deploy web server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            # pull new web server image
            docker pull registry.digitalocean.com/synctalk/web-server
            # stop old web server container
            docker stop web-server
            # remove old web server container
            docker rm web-server
            # create and run new web server container from new web server image
            docker run -detach --name web-server --publish 80:80 registry.digitalocean.com/synctalk/web-server
        timeout-minutes: 1
    timeout-minutes: 10
